@page "/usersmanagement/{idUser:guid}"

@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using Microsoft.IdentityModel.Tokens
@using System.Web
@inject NavigationManager NavigationManager
@inject IUserManagementService UserManagementService
@inject IUserService UserService
@inject IJsInteropService JsInterop

@rendermode InteractiveServer


<h3>Admin User Edit</h3>

<h4>@Message</h4>
@if (userData != null)
{
	<EditForm Model="changeInputModel" method="post" OnValidSubmit="ChangeUsernamePass" FormName="change">
		<DataAnnotationsValidator></DataAnnotationsValidator>
		<h2>Create a new support</h2>
		<hr/>
		<ValidationSummary class="text-danger" role="alert"></ValidationSummary>

		<div class="form-floating mb-3">
			<InputText @bind-Value="changeInputModel.NewUsername" class="form-control" placeholder="username"/>
			<label>Username</label>
			<ValidationMessage For="() => changeInputModel.NewUsername" class="text-danger"></ValidationMessage>
		</div>

		<div class="form-floating mb-3">
			<InputText @bind-Value="changeInputModel.NewPassword" class="form-control"></InputText>
			<label>Password</label>
		</div>
		<button type="submit" class="btn btn-primary">Update</button>
	</EditForm>
}


@code {


	[Parameter]
	public Guid? idUser { get; set; }

	private string? Message; 

	private string? idUserString;	
	private ApplicationUser? userData;

	[SupplyParameterFromForm]
	private UsernamePassChangeModel changeInputModel { get; set; } = new ();

	protected override async Task OnParametersSetAsync()
	{
		idUserString = idUser.ToString();

		if (idUserString != null)
		{
			Message = "";
			userData = await UserService.GetUserByIdAsync(idUserString);
			changeInputModel.NewUsername = userData.UserName;
		}

	}

	private async Task ChangeUsernamePass()
	{
		if (userData == null || idUserString == null)
		{
			await JsInterop.LogToConsole("User data is not available", "error");
			return;
		}

		string baseUrl = NavigationManager.BaseUri;

		var returnService = await UserManagementService.AdminChangeUsernameAndPassword(
				userData.Id,
				changeInputModel.NewUsername,
				changeInputModel.NewPassword,
				userData.Email,
				baseUrl
			);

		if (returnService.Success)
		{
			await JsInterop.LogToConsole("Username and password updated successfully ,E-mail sended to user");
			Message = "Username and password updated successfully";
		}
		else
		{
			Message = returnService.Message;	
			
		}
	}

	private class UsernamePassChangeModel
	{
		[Required]
		[StringLength(256, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 3)]
		public string NewUsername { get; set; }

		[Required]
		[StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
		public string NewPassword { get; set; }

	
	}

}

